import { Router, Request, Response } from 'express'
import MySQL from '../mysql/mysql';

const express = require("express");
const router = require("express").Router();
const { body, validationResult } = require('express-validator');

const swaggerUi = require('swagger-ui-express');
const swaggerJsdoc = require('swagger-jsdoc');

import * as swaggerDocument from '../swagger.json';
var bodyParser = require('body-parser')

// var app = express()

// create application/json parser
// var jsonParser = bodyParser.json()

// create application/x-www-form-urlencoded parser
var urlencodedParser = bodyParser.urlencoded({ extended: false })

// const options = {
//     swaggerDefinition: {
//       // Like the one described here: https://swagger.io/specification/#infoObject
//       info: {
//         title: 'Test API',
//         version: '1.0.0',
//         description: 'Test Express API with autogenerated swagger doc',
//       },
//     },
//     // List of files to be processes. You can also set globs './routes/*.js'
//     apis: ['/api/librerias'],
//   };

//   const specs = swaggerJsdoc(options);


// router.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));
router.use('/api-docs', swaggerUi.serve);
router.get('/api-docs', swaggerUi.setup(swaggerDocument));

//**************************LIBRERIAS(inicio)******************************************** */

//Obtener todas las librerías

router.get('/api/librerias', (req: Request, res: Response) => {

    const query = `SELECT * FROM TbLibreria;`;

    MySQL.ejecutarQuery(query, (err: any, librerias: Object[]) => {
        if (err) {
            res.status(400).json({
                ok: false,
                error: err

            });
        } else {
            res.json({
                ok: true,
                librerias: librerias
            });
        }

    });
})


//Obtener una librería por ID
router.get('/api/libreriasporid/:id', (req: Request, res: Response) => {

    const id = req.params.id;
    const escapeId = MySQL.instance.cnn.escape(id);

    const query = `CALL GETLIBRERIA(${escapeId})`;
    console.log(query);

    MySQL.ejecutarQuery(query, (err: any, librerias: Object[]) => {
        if (err) {
            res.status(400).json({
                ok: false,
                error: err

            });
        } else {
            res.json({
                ok: true,
                librerias: librerias[0]
            });
        }

    });
})

//Crear una nueva librería  
router.post('/api/librerias/', urlencodedParser, (req: Request, res: Response) => {

    const nombre = req.body.Nombre;
    const direccion = req.body.Direccion;
    const telefono = req.body.Telefono;
    console.log(`Params: ` + nombre + ` ` + direccion + ` ` + telefono);

    const eNombre = MySQL.instance.cnn.escape(nombre);
    const eDireccion = MySQL.instance.cnn.escape(direccion);
    const eTelefono = MySQL.instance.cnn.escape(telefono);

    const query = `CALL INSLIBRERIA(${eNombre},${eDireccion},${eTelefono})`;
    console.log(query);

    MySQL.ejecutarQuery(query, (err: any, librerias: Object[]) => {
        if (err) {
            res.status(400).json({
                ok: false,
                error: err

            });
        } else {
            res.json({
                ok: true,
                mensaje: "Se registró correctamente"
            });
        }

    });
})

//Actualiza una librería específica
router.put('/api/librerias/', urlencodedParser, (req: Request, res: Response) => {

        // console.log(req.body);
        
        // let errors = validationResult(req);
        // console.log(`Errors:` + errors);
        // if (!errors.isEmpty()) {
        //     console.log(errors.array());
        //     return res.status(400).json({ errors: errors.array() });

        // }else{

        //     return res.status(200).json({ errors: "No errors" });
        // }

        const id = req.body.IDLibreria;
        const nombre = req.body.Nombre;
        const direccion = req.body.Direccion;
        const telefono = req.body.Telefono;
        console.log(`Params: ` + nombre + ` ` + direccion + ` ` + telefono + ` ` + id);



        const eID = MySQL.instance.cnn.escape(id);
        const eNombre = MySQL.instance.cnn.escape(nombre);
        const eDireccion = MySQL.instance.cnn.escape(direccion);
        const eTelefono = MySQL.instance.cnn.escape(telefono);

        const query = `CALL UPDLIBRERIA(${eID},${eNombre},${eDireccion},${eTelefono})`;
        console.log(query);

        MySQL.ejecutarQuery(query, (err: any, librerias: Object[]) => {
            if (err) {
                res.status(400).json({
                    ok: false,
                    error: err

                });
            } else {
                res.json({
                    ok: true,
                    mensaje: "Se actualizó correctamente"
                });
            }

        });
    })

    
//Actualiza una librería específica
router.delete('/api/librerias/:id', urlencodedParser, (req: Request, res: Response) => {

    const id = req.params.id;

    // const id = req.body.IDLibreria;
    // const nombre = req.body.Nombre;
    // const direccion = req.body.Direccion;
    // const telefono = req.body.Telefono;
    // console.log(`Params: ` + nombre + ` ` + direccion + ` ` + telefono + ` ` + id);



    const eID = MySQL.instance.cnn.escape(id);
    // const eNombre = MySQL.instance.cnn.escape(nombre);
    // const eDireccion = MySQL.instance.cnn.escape(direccion);
    // const eTelefono = MySQL.instance.cnn.escape(telefono);

    const query = `CALL DELLIBRERIA(${eID})`;
    console.log(query);

    MySQL.ejecutarQuery(query, (err: any, librerias: Object[]) => {
        if (err) {
            res.status(400).json({
                ok: false,
                error: err

            });
        } else {
            res.json({
                ok: true,
                mensaje: "Se eliminó correctamente"
            });
        }

    });
})


    function createValidationFor(route: string) {
        switch (route) {
            case 'lib':
                return [
                    body('Nombre').isEmail().withMessage('must be an email ASDASDASD')
                ];
    
            default:
                return [];
        }
    }

//**************************LIBRERIAS (fin)******************************************** */

//Se crean nuevas librerías
// router.get('/librerias/:id',(req: Request, res: Response)=>{
// router.post('/librerias/:id',(req: Request, res: Response)=>{    

//     const id = req.params.id;
//     const escapeId = MySQL.instance.cnn.escape(id);

//     const query= `CALL GETLIBRERIA(${escapeId})`;
//     console.log(query);

//     MySQL.ejecutarQuery(query,(err: any,librerias: Object[])=>{
//         if(err){
//             res.status(400).json({
//                 ok: false,
//                 error: err

//             });
//         }else{
//             res.json({
//                 ok:true,
//                 librerias: librerias[0]
//             });
//         }

//     });
// })




// router.get('/heroes',(req: Request, res: Response)=>{

//     const query= `SELECT * FROM heroes;`;

//     MySQL.ejecutarQuery(query,(err: any,heroes: Object[])=>{
//         if(err){
//             res.status(400).json({
//                 ok: false,
//                 error: err

//             });
//         }else{
//             res.json({
//                 ok:true,
//                 heroes: heroes
//             });
//         }

//     });

// })

// router.get('/heroes/:id',(req: Request, res: Response)=>{

// const id = req.params.id;
// const escapeId = MySQL.instance.cnn.escape(id);


// const query= `SELECT * FROM heroes WHERE id=${escapeId}`;

// MySQL.ejecutarQuery(query,(err: any,heroes: Object[])=>{
//     if(err){
//         res.status(400).json({
//             ok: false,
//             error: err

//         });
//     }else{
//         res.json({
//             ok:true,
//             heroe: heroes[0]
//         });
//     }

// });

// })

export default router;